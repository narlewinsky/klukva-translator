{"version":3,"sources":["media/logo.svg","media/copy.svg","media/export.svg","media/clear.svg","Board.js","App.js","reportWebVitals.js","index.js"],"names":["modes","Board","props","handleChange","e","content","target","value","translation","latinize","state","mode","characters","length","document","querySelector","scrollTop","scrollHeight","setState","clear","upload","export","blob","Blob","type","saveAs","onCopy","console","log","changeTranslator","bind","limit","className","effect","backgroundColor","arrowColor","id","placeholder","maxlength","this","onChange","data-tip","onClick","src","ClearIcon","alt","ExportIcon","text","CopyIcon","Component","App","logo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4377e6a6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.0a58b208.svg\";","export default __webpack_public_path__ + \"static/media/copy.7232b27a.svg\";","export default __webpack_public_path__ + \"static/media/export.f0ae1084.svg\";","export default __webpack_public_path__ + \"static/media/clear.960a9a98.svg\";","import './Board.css';\nimport React, { Component } from 'react';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport {ScrollSync, ScrollSyncPane} from \"react-scroll-sync\";\nimport ReactTooltip from 'react-tooltip';\nimport { saveAs } from 'file-saver';\nimport latinize from 'klukva-core';\nimport CopyIcon from './media/copy.svg';\nimport ExportIcon from './media/export.svg';\nimport ClearIcon from './media/clear.svg';\n\nconst modes = [\"modern\", \"communist1\", \"communist2\", \"communist3\"]\n\nclass Board extends Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.state = {\n            content: \"\",\n            translation: \"\",\n            mode: 0,\n            characters: 0,\n            limit: 10000\n        }\n    }\n\n    handleChange = (e) => {\n        const content = e.target.value;\n        const translation = latinize(e.target.value, modes[this.state.mode]);\n        const characters = e.target.value.length;\n\n        document.querySelector('#Output').scrollTop = document.querySelector('#Output').scrollHeight;\n\n        this.setState({\n            content: content,\n            translation: translation,\n            characters: characters\n        });\n    }\n\n    clear = (e) => {\n        document.querySelector('#Input').value = \"\";\n        document.querySelector('#Output').value = \"\";\n    }\n\n    upload = (e) => {\n\n    }\n\n    export = (e) => {\n        var blob = new Blob([this.state.translation], {type: \"text/plain;charset=utf-8\"});\n        saveAs(blob, \"translation.txt\");\n    }\n\n    onCopy = (e) => {\n        console.log(\"Here must be a message box\")\n    }\n\n    changeTranslator = (e) => {\n        const mode = (this.state.mode < 3) ? this.state.mode + 1 : 0;\n        this.setState({\n            mode: mode,\n            translation: latinize(this.state.content, modes[mode])\n        })\n    }\n\n    render() {\n        return (\n            <ScrollSync>\n                <div className=\"Board\">\n                    <ReactTooltip className=\"Board-Tooltip\" effect=\"solid\" backgroundColor=\"#040c1d\" arrowColor=\"transparent\" />\n                    <div className=\"Board-Panel\">\n                        <div className=\"Board-Panel-Editor\">\n                            <ScrollSyncPane>\n                            <textarea className=\"Board-Editor-TextArea\"\n                                      id=\"Input\"\n                                      placeholder=\"Введите сюда текст на кириллице\"\n                                      maxlength={this.state.limit}\n                                      onChange={this.handleChange} />\n                            </ScrollSyncPane>\n                        </div>\n                        <div className=\"Board-Panel-Separator\" />\n                        <div className=\"Board-Panel-Toolbar\">\n                            <div className=\"Board-Panel-Counter\">\n                                <p className=\"Board-Panel-Counter-Label\">{this.state.characters} / {this.state.limit}</p>\n                            </div>\n                            <div className=\"Board-Panel-ButtonGroup\">\n                                <button className=\"Board-Panel-Button\" data-tip=\"Oçistitj formu\" onClick={this.clear}>\n                                    <img className=\"Icon\" src={ClearIcon} alt=\"clear\" />\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"Board-Space\" />\n                    <div className=\"Board-Panel\">\n                        <div className=\"Board-Panel-Editor\">\n                            <ScrollSyncPane>\n                            <textarea className=\"Board-Editor-TextArea\"\n                                      id=\"Output\"\n                                      value={this.state.translation} />\n                            </ScrollSyncPane>\n                        </div>\n                        <div className=\"Board-Panel-Separator\" />\n                        <div className=\"Board-Panel-Toolbar\">\n                            <div className=\"Board-Panel-Switcher\">\n                                <p className=\"Board-Panel-Switcher-Label\">Reżim perevoda:</p>\n                                <button className=\"Board-Panel-Switcher-Button\" onClick={this.changeTranslator}>{modes[this.state.mode]}</button>\n                            </div>\n                            <div className=\"Board-Panel-ButtonGroup\">\n                                <button className=\"Board-Panel-Button\" data-tip=\"Soxranitj perevod\" onClick={this.export}>\n                                    <img className=\"Icon\" src={ExportIcon} alt=\"export\" />\n                                </button>\n                                <CopyToClipboard onCopy={this.onCopy} text={this.state.translation}>\n                                    <button className=\"Board-Panel-Button\" data-tip=\"Skopirovatj perevod\">\n                                        <img className=\"Icon\" src={CopyIcon} alt=\"copy\" />\n                                    </button>\n                                </CopyToClipboard>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ScrollSync>\n        )\n    }\n}\n\nexport default Board;\n","import \"./App.css\";\nimport logo from './media/logo.svg';\nimport Board from './Board';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className=\"Background\" />\n            <img className=\"Logo\" src={logo} alt=\"logo\" />\n            <div className=\"Header\">\n                <div className=\"Header-Content\">\n                    <h1>PEREVOD NA RUSSKUJU LATINICU</h1>\n                    <p>Perevodi legko russkij tekst s kirillicy na sovremennyj projekt latinicy, osnovannyj na rezuljtatax raboty komissii po razrabotke projekta o latinizacii russkogo alfavita vo glave s professorom N. F. Jakovlevym.</p>\n                </div>\n            </div>\n            <Board />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}